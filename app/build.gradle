apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: "com.vanniktech.android.junit.jacoco"
apply plugin: "org.sonarqube"
//apply plugin: 'io.fabric'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 31
    buildToolsVersion "29.0.3"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "life.league.corepresenter"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [auth0Domain: "@string/com_auth0_domain", auth0Scheme: "@string/com_auth0_scheme"]

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
            buildConfigField("String", "FIREBASE_CLOUD_FUNCTIONS_ENDPOINT", '"https://us-central1-tagstwo-431e3.cloudfunctions.net"')
        }
        debug {
            testCoverageEnabled true
            buildConfigField("String", "FIREBASE_CLOUD_FUNCTIONS_ENDPOINT", '"https://us-central1-tagstwo-431e3.cloudfunctions.net"')
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

//    dataBinding {
//        enabled = true
//    }
    viewBinding {
        enabled = true
    }

    testOptions {
        animationsDisabled = true
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }

        }

    }

    junitJacoco {
        jacocoVersion = '0.8.5' // type String
        ignoreProjects = [] // type String array
        excludes // type String List
        includeNoLocationClasses = false // type boolean
        includeInstrumentationCoverageInMergedReport = false // type boolean
    }

    lintOptions {
        abortOnError false
    }

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=com.google.accompanist.pager.ExperimentalPagerApi"
    }
}

dependencies {
    implementation project(":tcn-client-android:tcn-client-android")

    // I think we need this to prevent a random unmarshalling error with login
    implementation 'com.auth0.android:auth0:2.5.0'

    implementation "com.github.EverlongProject:genesis-android:$genesisVersion"
    implementation "com.github.EverlongProject.league-core-android:league-core:$leagueCoreNetworkingAuthVersion"
    implementation 'com.auth0.android:auth0:2.5.0'
    implementation 'com.auth0.android:jwtdecode:2.0.0'
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":healthjourney")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.core:core-ktx:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.paging:paging-runtime-ktx:2.1.2"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation "androidx.fragment:fragment-ktx:1.2.4"
    implementation "androidx.work:work-runtime-ktx:2.3.4"
    //Google Analytics dependency.
    implementation 'com.google.firebase:firebase-analytics:17.4.0'
    //Firebase Crashlytics dependency.
//    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:29.0.0')

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    def nav_version = "2.2.1"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def lifecycle_version = "2.3.0-alpha01"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    implementation "com.squareup.okhttp3:okhttp:4.5.0"

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "com.google.android.material:material:1.1.0"

    implementation "com.google.firebase:firebase-firestore-ktx:21.4.2"

    implementation "com.google.guava:guava:29.0-android"

    implementation "pub.devrel:easypermissions:3.0.0"

    def koin_version = '3.1.2'
    implementation "io.insert-koin:koin-android:$koin_version"
//    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    //// TEST RELATED DEPENDENCIES

    // Junit5 for Unit Tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"

    // Junit5 Parameterized tests
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"

    // Junit5 Run time
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    // AssertJ for Assertions
    testImplementation "org.assertj:assertj-core:3.11.1"

    // AndroidX Testing Core library
    androidTestImplementation "androidx.test:core:1.2.0"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test:rules:1.2.0"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.ext:truth:1.2.0"
    androidTestImplementation "com.google.truth:truth:1.0"

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"

    // Fragment testing
    def fragment_testing_version = "1.2.4"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_testing_version"

}


/*
sonarqube {
    properties {
        property "sonar.projectKey", "covid19risk_covidwatch-android"
       // property "sonar.organization", "covid19risk"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/debug/jacoco.xml,${buildDir}/reports/jacoco/release/jacoco.xml,${buildDir}/reports/jacocoCombined/debug/jacoco.xml"
        property 'sonar.androidLint.reportPaths', "${buildDir}/reports/lint-results.xml"
    }
}
*/